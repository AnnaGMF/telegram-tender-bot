from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

TOKEN = '–í–°–¢–ê–í–¨_–°–Æ–î–ê_–°–í–û–ô_–¢–û–ö–ï–ù'

# –í–æ–ø—Ä–æ—Å—ã –∏ —ç—Ç–∞–ø—ã
questions = [
    {"key": "budget", "text": "1Ô∏è‚É£ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?", "options": [("< 50k", 1), ("50k‚Äì100k", 2), ("> 100k", 3)]},
    {"key": "relationship", "text": "2Ô∏è‚É£ –ö–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º?", "options": [("–•–æ–ª–æ–¥–Ω—ã–µ", 0), ("–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ", 1), ("–¢—ë–ø–ª—ã–µ", 2)]},
    {"key": "lpr", "text": "3Ô∏è‚É£ –ó–Ω–∞–∫–æ–º—ã —Å –õ–ü–† –∏–ª–∏ CEO?", "options": [("–ù–µ—Ç", 0), ("–î–∞", 1)]},
    {"key": "partnership", "text": "4Ô∏è‚É£ –ì–æ—Ç–æ–≤—ã –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É?", "options": [("–ù–µ—Ç", 0), ("–í–æ–∑–º–æ–∂–Ω–æ", 1), ("–î–∞", 2)]},
    {"key": "strategy", "text": "5Ô∏è‚É£ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞?", "options": [("–ù–∏–∑–∫–∞—è", 0), ("–°—Ä–µ–¥–Ω—è—è", 1), ("–í—ã—Å–æ–∫–∞—è", 2)]},
    {"key": "tech", "text": "6Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—ã?", "options": [("–ù–µ—Ç", 0), ("–î–∞", 1)]},
]

user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_sessions[user_id] = {"step": 0, "answers": {}}
    keyboard = [[KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ–Ω–¥–µ—Ä–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = {"step": 0, "answers": {}}
    await send_question(update, context, user_id)

async def send_question(update_or_query, context, user_id):
    step = user_sessions[user_id]["step"]
    if step < len(questions):
        q = questions[step]
        buttons = [[InlineKeyboardButton(txt, callback_data=f"{q['key']}|{score}")] for txt, score in q["options"]]
        if step > 0:
            buttons.append([InlineKeyboardButton("‚óÄ –ù–∞–∑–∞–¥", callback_data="back")])
        if getattr(update_or_query, 'callback_query', None):
            await update_or_query.callback_query.edit_message_text(q["text"], reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await update_or_query.message.reply_text(q["text"], reply_markup=InlineKeyboardMarkup(buttons))
    else:
        await show_result(update_or_query, user_id)

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in user_sessions:
        user_sessions[user_id] = {"step": 0, "answers": {}}

    step = user_sessions[user_id]["step"]

    if query.data == "back":
        if step > 0:
            user_sessions[user_id]["step"] -= 1
        await send_question(update, context, user_id)
        return

    key, score = query.data.split("|")
    user_sessions[user_id]["answers"][key] = int(score)
    user_sessions[user_id]["step"] += 1
    await send_question(update, context, user_id)

async def show_result(update, user_id):
    total = sum(user_sessions[user_id]["answers"].values())
    if total >= 8:
        result = "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!"
    elif total >= 5:
        result = "üü° –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º. –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏."
    else:
        result = "‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å."

    await update.callback_query.edit_message_text(f"–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {total}/11\n{result}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üöÄ –ù–∞—á–∞—Ç—å"), handle_start_button))
    app.add_handler(CallbackQueryHandler(handle_answer))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏ /start –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É")
    app.run_polling()
